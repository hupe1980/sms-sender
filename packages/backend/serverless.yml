service: sms-sender

plugins:
  - aws-amplify-serverless-plugin
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs10.x
  profile: ${opt:profile}
  stage: ${opt:stage, 'dev'}
  region: eu-central-1
  environment:
    CONTACTS_TABLE: ${self:custom.prefix}-contacts
    MESSAGES_TABLE: ${self:custom.prefix}-messages
    CONTACT_ID_INDEX: ContactIdIndex
    LOG_LEVEL: debug
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [ ContactsTable, Arn ]
        - "Fn::GetAtt": [ MessagesTable, Arn ]
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MESSAGES_TABLE}/index/${self:provider.environment.CONTACT_ID_INDEX}

  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.USER_ID_INDEX}

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatementsName: serverless-todo-app-dev-GenerateUploadUrl-lambdaRole       
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.USER_ID_INDEX}
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*  

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: todoId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_ID_INDEX}
            KeySchema:
              - AttributeName: todoId
                KeyType: HASH
              - AttributeName: userId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket                    
"

custom:
  prefix: ${self:provider.stage}-${self:service}
  amplify:
    - filename: ../frontend/src/aws-exports.js
      type: javascript
      appClient: WebCognitoUserPoolClient
      s3bucket: disabled
  serverless-offline:
    host: 0.0.0.0
    port: 4000
    noAuth: true
  dynamodb:
    stages:
      - dev
    start:
      port: 4569
      host: localstack
      migrate: true
      seed: true
      noStart: true
    seed:
      domain:
        sources:
          - table: ${self:provider.environment.CONTACTS_TABLE}
            sources: [./seeds/contacts.json]

functions:
  GetContact:
    handler: src/lambda/http/contacts/get-contact.handler
    events:
      - http: 
          path: contacts/{contactId}
          method: get
          cors: true
          authorizer: aws_iam

  GetContacts:
    handler: src/lambda/http/contacts/get-contacts.handler
    events:
      - http: 
          path: contacts
          method: get
          cors: true
          authorizer: aws_iam

  CreateContact:
    handler: src/lambda/http/contacts/create-contact.handler
    events:
      - http: 
          path: contacts
          method: post
          cors: true
          authorizer: aws_iam

  UpdateContact:
    handler: src/lambda/http/contacts/update-contact.handler
    events:
      - http: 
          path: contacts/{contactId}
          method: put
          cors: true
          authorizer: aws_iam

  DeleteContact:
    handler: src/lambda/http/contacts/delete-contact.handler
    events:
      - http: 
          path: contacts/{contactId}
          method: delete
          cors: true
          authorizer: aws_iam

  GetMessages:
    handler: src/lambda/http/messages/get-messages.handler
    events:
      - http: 
          path: messages
          method: get
          cors: true
          authorizer: aws_iam

  CreateMessage:
    handler: src/lambda/http/messages/create-message.handler
    events:
      - http: 
          path: messages
          method: post
          cors: true
          authorizer: aws_iam

resources:
  - ${file(resources/api-gateway-errors.yml)}
  - ${file(resources/dynamodb-table.yml)}
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
    

   

